//******************************************************************************
//******************************************************************************
//
//  FileIO Interface
//
//
//  Description: This interface unifies file access/read/write capabilities.
//
//******************************************************************************
//******************************************************************************
#ifndef mmIFileIOH
#define mmIFileIOH

#include <vector>

#include <mmGlobalDefs.h>
#include <mmError.h>

////////////////////////////////////////////////////////////////////////////////
/// This namespace unifies Input/Output operations to hard drive resources.
////////////////////////////////////////////////////////////////////////////////
namespace mmFileIO
{
	////////////////////////////////////////////////////////////////////////////////
	/// This enumeration defines open access to file.
	////////////////////////////////////////////////////////////////////////////////
	typedef enum
	{
		////////////////////////////////////////////////////////////////////////////////
		/// Read access.
		////////////////////////////////////////////////////////////////////////////////
		for_read          = 0,
		////////////////////////////////////////////////////////////////////////////////
		/// Write access.
		////////////////////////////////////////////////////////////////////////////////
		trunc_for_write   = 1,
		////////////////////////////////////////////////////////////////////////////////
		/// Open for write and move to end of file.
		////////////////////////////////////////////////////////////////////////////////
		append_for_write  = 2
	} eOpenFileMode;

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for global methods supports hsrd drive/directories operations.
	////////////////////////////////////////////////////////////////////////////////
	class mmFileUtilsI
	{
		public:   // type definitions
			////////////////////////////////////////////////////////////////////////////////
			/// Structure defining file/directory on hard drive.
			////////////////////////////////////////////////////////////////////////////////
			typedef struct
			{
				////////////////////////////////////////////////////////////////////////////////
				/// Name of file/directory.
				////////////////////////////////////////////////////////////////////////////////
				mmString sName;
				////////////////////////////////////////////////////////////////////////////////
				/// TRUE if file, FALSE if directory.
				////////////////////////////////////////////////////////////////////////////////
				bool bFile;
			} sDirElement;
		public:		// methods
			////////////////////////////////////////////////////////////////////////////////
			/// This function creates directory. In case of error it throws
			/// mmeFileIONoSuchFileOrDirectory, mmeFileIOPermissionToFileDenied or
			/// mmeFileIOUnknownError.
			///
			/// @param[in] p_sDirName name of directory with path.
			////////////////////////////////////////////////////////////////////////////////
			virtual void CreateDir(mmString p_sDirName) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// Method creates directory(ies) in a given location.
			///
			/// @param[in] p_sDirName path to creation.
			////////////////////////////////////////////////////////////////////////////////
			virtual void CreateDirStructure(mmString p_sDirName) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// This method deletes all directory content. In case of error it throws
			/// mmeFileIONoSuchFileOrDirectory, mmeFileIOPermissionToFileDenied or
			/// mmeFileIOUnknownError.
			///
			/// @param[in] p_sDirName directory name with path.
			////////////////////////////////////////////////////////////////////////////////
			virtual void ClearDir(mmString p_sDirName) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// This method deletes directory. In case of error it throws
			/// mmeFileIONoSuchFileOrDirectory, mmeFileIOPermissionToFileDenied or
			/// mmeFileIOUnknownError.
			///
			/// @param[in] p_sDirName directory name with path,
			/// @param[in] p_bWithElements if TRUE it deletes also directory content,
			///            if FALSE deletes only if directory is empty.
			////////////////////////////////////////////////////////////////////////////////
			virtual void RemoveDir(mmString p_sDirName,bool p_bWithElements) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method checks if given directory exists. In case of error it throws
			/// mmeFileIOUnknownError.
			///
			/// @param[in] p_sDirName directory name with full path,
			/// @return if directory exists it returns TRUE, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsExistingDir(mmString p_sDirName) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// Method returns path do temporary directory. In case of error it throws
			/// mmeFileIONoTemporaryDirectory.
			///
			/// @return full path to temporary directory
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetTemporaryDir(void) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// This method returns full path to application directory.
			///
			/// @return full path to application
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetApplicationDir(void) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// Method returns elements belonging to directory p_sDirName.
			///
			/// @param[in] p_sDirName full path to directory
			/// @param[in] p_sDirWildcards string defining search criterion eg "*.txt" or
			///							 "*.*",
			/// @return vector with directory elements.
			////////////////////////////////////////////////////////////////////////////////
			virtual std::vector<sDirElement> GetDirElements(mmString p_sDirName,
																											mmString p_sDirWildcards) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// Method checks if given directory is empty or not.
			///
			/// @param[in] p_sDirName full path to directory,
			/// @return TRUE if directory is empty, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsEmptyDir(mmString p_sDirName) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method removes file from hard drive. In case of error it throws
			/// mmeFileIONoSuchFileOrDirectory, mmeFileIOPermissionToFileDenied or
			/// mmeFileIOUnknownError.
			///
			/// @param[in] p_sFileName name with full path of file to remove
			////////////////////////////////////////////////////////////////////////////////
			virtual void RemoveFile(mmString p_sFileName) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// This method checks if file exists.
			///
			/// @param[in] p_sFileName name with full path to checked file
			/// @return TRUE if file exists, FALSE otherwise
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsExistingFile(mmString p_sFileName) = 0;
			////////////////////////////////////////////////////////////////////////////////
			/// Method extracts path to file from full path with name.
			///
			/// @param[in] p_sFileName file name with full path,
			/// @return path to file.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetPathToFile(mmString p_sFileName) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for text file reading functionality.
	////////////////////////////////////////////////////////////////////////////////
	class mmTextFileReadI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual desctructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmTextFileReadI() {};
		public:		// methods

			////////////////////////////////////////////////////////////////////////////////
			/// Method opens file for reading. In case of error during file opening
			/// it throws mmError(mmeFileIOCantOpenFile)
			///
			/// @param[in] p_sFileName file name with full path to open.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Open(mmString p_sFileName) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method closes opened file.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Close(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method reads and returns char from file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened). In case of read error it throws
			/// mmError(mmeFileIOCantReadFromFile).
			///
			/// @param[out] p_pcChar red char is stored here
			/// @return TRUE if read successful, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool ReadChar(wchar_t* p_pcChar) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method reads and return line from file. If file position is in the middle
			/// line it returns only rest of line. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened). In case of read error it throws
			/// mmError(mmeFileIOCantReadFromFile).
			///
			/// @param[out] p_psFileLine red line is stored here
			/// @return TRUE if read successful, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool ReadLine(mmString* p_psFileLine) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method reads many lines from file.
			///
			/// @param[out] p_psLines pointer to vector of strings where red lines are stored
			/// @param[in] p_iLinesCount number of lines to read
			/// @return number of really red lines, if =0 end of file or error occurs
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt ReadLines(std::vector<mmString>* p_psLines,mmInt p_iLinesCount) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns size of opened file in bytes. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return size of file.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt GetLenght(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method reads whole file and stores it in memory pointed by p_pcFileContent.
			/// p_pcFileContent memory block should be large enough to store file content.
			/// If file is not opened it throws mmError(mmeFileIOFileIsNotOpened).
			/// In case of read error it throws mmError(mmeFileIOCantReadFromFile).
			///
			/// @param[out] p_pcFileContent pointer to memory block where file content is stored
			/// @return number of really readed chars.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt ReadWholeFile(wchar_t* p_pcFileContent) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method checks end of file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened). In case of read error it throws
			/// mmError(mmeFileIOCantReadFromFile).
			///
			/// @return TRUE if end of file, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool Eof(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns information if any file is opened currently.
			///
			/// @return TRUE if file is already opened, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsActiveFile(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns current file position. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return current file position.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt GetActualFilePosition(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns name of opened file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return file name.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetFileName(void) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for text file reading functionality with extension of reading of
	/// whole file into memory during opening and further use of data from memory
	/// only.
	////////////////////////////////////////////////////////////////////////////////
	class mmMemTextFileReadI: public mmTextFileReadI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual destructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmMemTextFileReadI() {};

			////////////////////////////////////////////////////////////////////////////////
			/// Method opens text file for reading. In case of error during file opening
			/// it throws mmError(mmeFileIOCantOpenFile). In case of read error it throws
			/// mmError(mmeFileIOCantReadFromFile).
			///
			/// @param[in] p_sFileName file name with path
			/// @param[in] p_bToMemory TRUE it reads whole file into memory, FALSE it opens
			///            file in standard way
			////////////////////////////////////////////////////////////////////////////////
			virtual void Open(mmString p_sFileName,bool p_bToMemory) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for text file writing functionality.
	////////////////////////////////////////////////////////////////////////////////
	class mmTextFileWriteI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual destructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmTextFileWriteI() {};

			////////////////////////////////////////////////////////////////////////////////
			/// Method opens file for writing. In case of error during file opening
			/// it throws mmError(mmeFileIOCantOpenFile).
			///
			/// @param[in] p_sFileName file name with full path
			/// @param[in] p_eOpenMode file open mode
			////////////////////////////////////////////////////////////////////////////////
			virtual void Open(mmString p_sFileName,
												mmFileIO::eOpenFileMode p_eOpenMode) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method closes opened file. It saves all unsaved data.
			/// In case of write error throws mmError(mmeFileIOCantWriteToFile).
			////////////////////////////////////////////////////////////////////////////////
			virtual void Close(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method writes char to file. In case of write error throws
			/// mmError(mmeFileIOCantWriteToFile). If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @param[in] p_cChar char to write
			////////////////////////////////////////////////////////////////////////////////
			virtual void WriteChar(wchar_t p_cChar) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method writes line to file. In case of write error throws
			/// mmError(mmeFileIOCantWriteToFile). If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @param[in] p_sFileLine string to write line
			////////////////////////////////////////////////////////////////////////////////
			virtual void WriteLine(mmString p_sFileLine) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Mehtod writes many lines to file.
			///
			/// @param[in] p_psLines pointer to vector of strings representing lines to write.
			////////////////////////////////////////////////////////////////////////////////
			virtual void WriteLines(std::vector<mmString>* p_psLines) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method writes text buffer into file. In case of write error throws
			/// mmError(mmeFileIOCantWriteToFile). If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @param[in] p_pcBuffer pointer to text buffer to write
			/// @param[in] p_iBufferSize size of buffer
			////////////////////////////////////////////////////////////////////////////////
			virtual void WriteBuffer(wchar_t const* p_pcBuffer,mmInt p_iBufferSize) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method writes end of line command into file. In case of write error throws
			/// mmError(mmeFileIOCantWriteToFile). If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			////////////////////////////////////////////////////////////////////////////////
			virtual void WriteEol(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method flushes file buffers and forces writing of all data.
			/// In case of write error throws mmError(mmeFileIOCantWriteToFile).
			/// If file is not opened it throws mmError(mmeFileIOFileIsNotOpened).
			////////////////////////////////////////////////////////////////////////////////
			virtual void Flush(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method checks if object uses (keep opened) currently any file.
			///
			/// @return TRUE file is using, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsActiveFile(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method returns name of currently opened file.
			/// If file is not opened it throws mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return file name with full path.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetFileName(void) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for text file writing functionality with extension of writing of
	/// whole file into memory and at the end saving whole memory structure into file.
	////////////////////////////////////////////////////////////////////////////////
	class mmMemTextFileWriteI: public mmTextFileWriteI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual destructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmMemTextFileWriteI() {};

			////////////////////////////////////////////////////////////////////////////////
			/// Method opens text fole to write. In case of error during file opening
			/// it throws mmError(mmeFileIOCantOpenFile).
			///
			/// @param[in] p_sFileName file name with full path to write
			/// @param[in] p_eOpenMode file open mode
			/// @param[in] p_bToMemory TRUE it creates whole file into memory and writes
			///												 it on hard drive once, FALSE it opens file
			///												 for write in standard way.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Open(mmString p_sFileName,
												eOpenFileMode p_eOpenMode,
												bool p_bToMemory) = 0;

	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for binary file reading functionality.
	////////////////////////////////////////////////////////////////////////////////
	class mmBinaryFileReadI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual desctructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmBinaryFileReadI() {};
		public:		// methods

			////////////////////////////////////////////////////////////////////////////////
			/// Method opens file for reading. In case of error during file opening
			/// it throws mmError(mmeFileIOCantOpenFile)
			///
			/// @param[in] p_sFileName file name with full path to open.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Open(mmString p_sFileName) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method closes opened file.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Close(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method reads buffer from file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened). In case of read error it throws
			/// mmError(mmeFileIOCantReadFromFile).
			///
			/// @param[out] p_pBuffer red buffer is stored here
			/// @param[in] p_iSize number of bytes to read from file
			/// @return TRUE if read successful, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool ReadBuffer(void* p_pBuffer,mmInt p_iSize) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns size of opened file in bytes. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return size of file.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt GetLenght(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method checks end of file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened). In case of read error it throws
			/// mmError(mmeFileIOCantReadFromFile).
			///
			/// @return TRUE if end of file, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool Eof(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns information if any file is opened currently.
			///
			/// @return TRUE if file is already opened, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsActiveFile(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns current file position. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return current file position.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt GetActualFilePosition(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method sets current file position. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened) or mmError(mmeFileIOBadFilePosition).
			///
			/// @param[in] p_iFilePos requested file position
			/// @return current file position.
			////////////////////////////////////////////////////////////////////////////////
			virtual void SetActualFilePosition(mmInt p_iFilePos) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns name of opened file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return file name.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetFileName(void) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface for binary file writing functionality.
	////////////////////////////////////////////////////////////////////////////////
	class mmBinaryFileWriteI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual desctructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmBinaryFileWriteI() {};
		public:		// methods

			////////////////////////////////////////////////////////////////////////////////
			/// Method opens file for writing. In case of error during file opening
			/// it throws mmError(mmeFileIOCantOpenFile).
			///
			/// @param[in] p_sFileName file name with full path
			/// @param[in] p_eOpenMode file open mode
			////////////////////////////////////////////////////////////////////////////////
			virtual void Open(mmString p_sFileName,
												mmFileIO::eOpenFileMode p_eOpenMode) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method closes opened file.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Close(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method saves buffer into file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened). In case of write error it throws
			/// mmError(mmeFileIOCantWriteToFile).
			///
			/// @param[out] p_pBuffer pointer to buffer
			/// @param[in] p_iSize number of bytes to write into file
			/// @return TRUE if read successful, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool WriteBuffer(void* p_pBuffer,mmInt p_iSize) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns size of opened file in bytes. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return size of file.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt GetLenght(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns information if any file is opened currently.
			///
			/// @return TRUE if file is already opened, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsActiveFile(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns current file position. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return current file position.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmInt GetActualFilePosition(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method sets current file position. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened) or mmError(mmeFileIOBadFilePosition).
			///
			/// @param[in] p_iFilePos requested file position
			/// @return current file position.
			////////////////////////////////////////////////////////////////////////////////
			virtual void SetActualFilePosition(mmInt p_iFilePos) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns name of opened file. If file is not opened it throws
			/// mmError(mmeFileIOFileIsNotOpened).
			///
			/// @return file name.
			////////////////////////////////////////////////////////////////////////////////
			virtual mmString GetFileName(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method flushes file buffers and forces writing of all data.
			/// In case of write error throws mmError(mmeFileIOCantWriteToFile).
			/// If file is not opened it throws mmError(mmeFileIOFileIsNotOpened).
			////////////////////////////////////////////////////////////////////////////////
			virtual void Flush(void) = 0;
	};
};

#endif
