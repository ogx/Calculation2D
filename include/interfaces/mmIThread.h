//******************************************************************************
//******************************************************************************
//
//  Thread Interface
//
//
//  Description: This header defines interfaces for threaded work/calculations.
//
//******************************************************************************
//******************************************************************************
#ifndef mmIThreadH
#define mmIThreadH

////////////////////////////////////////////////////////////////////////////////
/// Namespace for multi-threaded work.
////////////////////////////////////////////////////////////////////////////////
namespace mmThread
{
	////////////////////////////////////////////////////////////////////////////////
	/// This interface defined functionality for executing part of thread
	/// which should be implemented in descendant of this class. Methods of
	/// this interface are always called by mmThreadI, never directly by user.
	////////////////////////////////////////////////////////////////////////////////
	class mmThreadExecutionI
  {
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual destructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmThreadExecutionI() {};

			////////////////////////////////////////////////////////////////////////////////
			/// This method is called by mmThreadI class. This method should perform
			/// all thread work/calculations.
			///
			/// @return TRUE if execution is successful, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool Execute(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method is called for stopping current calculation. Class which
			/// implements this interface should assure this functionality.
			////////////////////////////////////////////////////////////////////////////////
			virtual void StopExecution(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method gives info about execution state.
			///
			/// @return TRUE if calculations are in progress, FALSE otherwise.
			////////////////////////////////////////////////////////////////////////////////
			virtual bool IsExecuting(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns calculation progress as a real value between [0..100] percent.
			///
			/// @return real value between [0..100] representing percentage of calculation
			///				  accomplishment
			////////////////////////////////////////////////////////////////////////////////
			virtual mmReal GetProgress(void) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////
	/// Interface m5ThreadI defines functionality of thread.
	////////////////////////////////////////////////////////////////////////////////
	class mmThreadI
	{
    public:     // definitions
      ////////////////////////////////////////////////////////////////////////////////
			/// State of thread.
			////////////////////////////////////////////////////////////////////////////////
			typedef enum
			{
				////////////////////////////////////////////////////////////////////////////////
				/// Just created.
				////////////////////////////////////////////////////////////////////////////////
				created     = 0,
				////////////////////////////////////////////////////////////////////////////////
				/// Thread is initialized and it knows his calculation mmThreadExecutionI object.
				////////////////////////////////////////////////////////////////////////////////
				initialized = 1,
				////////////////////////////////////////////////////////////////////////////////
				/// Thread calculates mmThreadExecutionI tasks.
				////////////////////////////////////////////////////////////////////////////////
				running     = 2,
				////////////////////////////////////////////////////////////////////////////////
				/// Thread is during stopping stage.
				////////////////////////////////////////////////////////////////////////////////
				stopping    = 3,
				////////////////////////////////////////////////////////////////////////////////
				/// Thread is stopped and calculations are not finished.
				////////////////////////////////////////////////////////////////////////////////
				stopped     = 4,
				////////////////////////////////////////////////////////////////////////////////
				/// Thread finished his calculations.
				////////////////////////////////////////////////////////////////////////////////
				finished    = 5
      } eStatus;
    public:     // methods
      ////////////////////////////////////////////////////////////////////////////////
			/// Virtual destructor.
			////////////////////////////////////////////////////////////////////////////////
      virtual ~mmThreadI() {};

      ////////////////////////////////////////////////////////////////////////////////
			/// This method registers class with implementation of mmThreadExecutionI
			/// interface which realizes calculation.
			///
			/// @param[in] p_psThreadExecutionObject pointer to object with implementation
			///            mmThreadExecutionI interface.
			////////////////////////////////////////////////////////////////////////////////
			virtual void RegisterThreadExecutionClass(mmThreadExecutionI* p_psThreadExecutionObject) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method starts thread execution.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Run(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method stops thread execution.
			////////////////////////////////////////////////////////////////////////////////
			virtual void Stop(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// This method returns state of thread.
			///
			/// @return thread state.
			////////////////////////////////////////////////////////////////////////////////
			virtual eStatus GetStatus(void) = 0;

			////////////////////////////////////////////////////////////////////////////////
			/// Method returns calculation progress as a real value between [0..100] percent.
			/// If progress value is less than 0 it means that progress is unavailable.
			///
			/// @return real value between [0..100] representing percentage of calculation
			///				  accomplishment
			////////////////////////////////////////////////////////////////////////////////
			virtual mmReal GetProgress(void) = 0;
  };
};

#endif
