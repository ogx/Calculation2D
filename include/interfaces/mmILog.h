//******************************************************************************
//******************************************************************************
//
//  Log Interface
//
//  Description: Specification of logging interfaces.
//
//******************************************************************************
//******************************************************************************
#ifndef mmILogH
#define mmILogH

#include <mmGlobalDefs.h>

////////////////////////////////////////////////////////////////////////////////
/// Log organization definitions.
////////////////////////////////////////////////////////////////////////////////
namespace mmLog
{
	////////////////////////////////////////////////////////////////////////////////
	/// Enumeration with definition of different log priorities.
	////////////////////////////////////////////////////////////////////////////////
	typedef enum
	{
		////////////////////////////////////////////////////////////////////////////////
		/// Debug log message. For any activity of the system.
		////////////////////////////////////////////////////////////////////////////////
		debug     = 0,
		////////////////////////////////////////////////////////////////////////////////
		/// Info log message. Second level of logging activity for raporting
		/// of system & user behavior.
		////////////////////////////////////////////////////////////////////////////////
		info      = 1,
		////////////////////////////////////////////////////////////////////////////////
		/// User log message. Used for logging user actions.
		////////////////////////////////////////////////////////////////////////////////
		user			= 2,
		////////////////////////////////////////////////////////////////////////////////
		/// Critical log messages. Used for raporting of critical system events.
		////////////////////////////////////////////////////////////////////////////////
		critical  = 3
	} eLogMessagePriority;

  ////////////////////////////////////////////////////////////////////////////////
	/// Log receiver interface defines functionality for collecting log messages
	/// from whole environment. It have to be implemented as thread safe.
	////////////////////////////////////////////////////////////////////////////////
	class mmLogReceiverI
	{
		public:   // methods
			////////////////////////////////////////////////////////////////////////////////
			/// Virtual destructor.
			////////////////////////////////////////////////////////////////////////////////
			virtual ~mmLogReceiverI() {};

			////////////////////////////////////////////////////////////////////////////////
			/// Method for sending log messages.
			///
			/// @param[in] p_ePriority - priority of log message, one of eLogMessagePriority
			///													 value
			/// @param[in] p_psString - pointer to string with message
      ////////////////////////////////////////////////////////////////////////////////
      virtual void SendLogMessage(eLogMessagePriority p_ePriority,mmString* p_psString) = 0;
  };
};

#endif
