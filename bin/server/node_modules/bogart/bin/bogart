#!/usr/bin/env node

var bogart  = require('../lib/bogart')
  , os      = require('os')
  , path    = require('path')
  , fs      = require('fs')
  , program = require('commander');

program
  .version('v'+bogart.version.join('.'))
  .option('-n, --no-batteries', 'do not include batteries')
  .option('-j, --jade', 'use jade view engine')
  .parse(process.argv);

console.log(program.args);

var operation = program.args.shift() || 'generate';
var eol = os.platform() === 'win32' ? '\r\n' : '\n';

program.viewEngine = 'mustache';
if (program.jade) {
  console.log('Using jade view engine.');
  program.viewEngine = 'jade';
}

var app = join(
    '/**'
  , ' * Generated by Bogart v'+bogart.version.join('.')
  , ' */'
  , ''
  , "var bogart = require('bogart');"
  , '{{requires}}'
  , 'var viewEngine = bogart.viewEngine(\'{{viewEngine}}\');'
  , 'var router = bogart.router();'
  , ''
  , "router.get('/', function(req) {"
  , "  return viewEngine.respond('index{{viewEngineExt}}', { locals: { title: 'Bogart' } });"
  , '});'
  , ''
  , 'var app = bogart.app();'
  , ''
  , '{{batteries}}'
  , '// app.use middleware here if desired.'
  , ''
  , 'app.use(router);'
  , ''
  , 'app.start();'
);

app = app.replace('{{batteries}}', program['no-batteries'] ? '' : join(
    '// Include the batteries! '
  , 'app.use(bogart.batteries);'
));

var requires = join(
    program.viewEngine === 'jade' ? 'require(\'bogart-jade\');' : ''
  , ''
);

app = app.replace('{{requires}}', requires);
app = app.replace('{{viewEngine}}', program.viewEngine);

var viewEngineExt = '.html';

switch (program.viewEngine) {
  case 'jade':
    viewEngineExt = '.jade'
    break;
}

app = app.replace('{{viewEngineExt}}', viewEngineExt);

var layoutMustache = join(
    ''
  , '<html>'
  , '<head>'
  , '  <link href="/css/main.css" rel="stylesheet" />'
  , '  <title>{{title}}</title>'
  , '</head>'
  , '<body>'
  , '  <h1>{{title}}</h1>'
  , '  {{{body}}}'
  , '</body>'
  , '</html>'
);

var indexMustache = join(
    ''
  , '<p>Hello World</p>'
  , ''
);

var layoutJade = join(
    '!!!'
  , 'html'
  , '  head'
  , '    link(href="/css/main.css", rel="stylesheet")'
  , '    title= title'
  , '  body'
  , '    h1= title'
  , '    !{body}'
  , ''
);

var indexJade = join(
    'p Hello World'
  , ''
);

var css = join(
    'body {'
  , '  font: 0.85em;'
  , '}'
  , ''
);

if (operation === 'generate') {
  var appPath = program.args.shift() || '.';
  generateApp(appPath);
}

function join() {
  var args = Array.prototype.slice.call(arguments);

  return args.join(eol);
}

function emptyDirectory(dir, callback) {
  fs.readdir(dir, function(err, files) {
    if (err && err.code !== 'ENOENT') {
      throw err;
    }

    callback(!files || !files.length);
  });
}

function mkdirp(dir, callback) {
  require('mkdirp')(dir, 0755, function(err) {
    if (err) {
      throw err;
    }

    console.log('Created Directory: '+dir);
    callback && callback();
  });
}

function writeFile(dir, str) {
  fs.writeFileSync(dir, str);
  console.log('Created: '+dir);
}

function generateApp(appPath) {
  var packageJson = join(
      '{'
    , '    "name": "'+path.basename(appPath)+'"'
    , '  , "version": "0.1.0"'
    , '  , "dependencies": {'
    , '        "bogart": ">='+bogart.version.join('.')+'"'+eol
  );

  if (program.jade) {
    packageJson += '      ,  "bogart-jade": "*"'+eol;
  }

  packageJson += join(
      '    }'
    , ' ,  "private": "true"'
    , '}'
  );

  console.log('Bogart Application Generator');
  console.log('v'+bogart.version.join('.'));
  console.log();
  console.log('Generating at '+appPath);
  mkdirp(appPath, function() {
    mkdirp(path.join(appPath, 'public'));
    mkdirp(path.join(appPath, 'public', 'javascript'));
    mkdirp(path.join(appPath, 'public', 'images'));
    mkdirp(path.join(appPath, 'public', 'css'), function() {
      writeFile(path.join(appPath, 'public', 'css'), css);
    });

    writeFile(path.join(appPath, 'package.json'), packageJson);
    writeFile(path.join(appPath, 'app.js'), app);
  });

  mkdirp(path.join(appPath, 'views'), function() {
    switch (program.viewEngine) {
      case 'jade':
        writeFile(path.join(appPath, 'views', 'layout.jade'), layoutJade);
        writeFile(path.join(appPath, 'views', 'index.jade'), indexJade);
        break;
      case 'mustache':
        writeFile(path.join(appPath, 'views', 'layout.html'), layoutMustache);
        writeFile(path.join(appPath, 'views', 'index.html'), indexMustache);
        break;
      default:
        throw 'Invalid View Engine: '+program.viewEngine;
    }
  });
}
